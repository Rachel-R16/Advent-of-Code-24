from collections import deque

# Read and parse input data
with open('D15 Input') as file:
    input_data = file.read().strip()

# Split room layout and movement instructions
room_data, moves = input_data.split('\n\n')  
room = room_data.split('\n')  

def enlarge_room(rows, cols, grid):
    # Enlarges the room by doubling the width of each cell based on its type
    enlarged_grid = []
    for r in range(rows):
        row = []
        for c in range(cols):
            if grid[r][c] == '#':  # Wall cell remains '#' and is duplicated
                row.append('#')
                row.append('#')
            if grid[r][c] == 'O':  # Box is split into two brackets
                row.append('[')
                row.append(']')
            if grid[r][c] == '.':  # Empty space is doubled
                row.append('.')
                row.append('.')
            if grid[r][c] == '@':  # Player's position expands into '@' and '.'
                row.append('@')
                row.append('.')
        enlarged_grid.append(row)
    grid = enlarged_grid  # Update grid with enlarged cells
    cols *= 2  # Columns are doubled in the enlarged room
    return rows, cols, grid

def process_room_movement(grid, enlarge):
    # Processes movements and updates the grid based on the movement sequence
    rows = len(grid)
    cols = len(grid[0])
    grid = [[grid[r][c] for c in range(cols)] for r in range(rows)]  # Create a copy of the grid

    if enlarge:
        rows, cols, grid = enlarge_room(rows, cols, grid)  # Enlarge grid if specified

    for row in range(rows):
        for col in range(cols):
            if grid[row][col] == '@':  # Locate starting position of the player
                start_row, start_col = row, col
                grid[row][col] = '.'  # Replace the start position with an empty space

    current_row, current_col = start_row, start_col  # Set the initial player position
    for move in moves:
        if move == '\n':  # Skip newlines in movement instructions
            continue
        delta_row, delta_col = {'^': (-1, 0), '>': (0, 1), 'v': (1, 0), '<': (0, -1)}[move]  # Map move to direction
        next_row, next_col = current_row + delta_row, current_col + delta_col
        if grid[next_row][next_col] == '#':  # If next cell is a wall, skip the move
            continue
        elif grid[next_row][next_col] == '.':  # Move to an empty space
            current_row, current_col = next_row, next_col
        elif grid[next_row][next_col] in ['[', ']', 'O']:  # Handle boxes or brackets
            queue = deque([(current_row, current_col)])  # Start a queue for BFS
            visited_cells = set()  # Track visited cells
            path_clear = True  # Flag to check if the path is clear
            while queue:
                cell_row, cell_col = queue.popleft()  # Get the current cell
                if (cell_row, cell_col) in visited_cells:  # Skip already visited cells
                    continue
                visited_cells.add((cell_row, cell_col))
                new_row, new_col = cell_row + delta_row, cell_col + delta_col
                if grid[new_row][new_col] == '#':  # If the path is blocked by a wall, stop
                    path_clear = False
                    break
                if grid[new_row][new_col] == 'O':  # Add box cells to the queue
                    queue.append((new_row, new_col))
                if grid[new_row][new_col] == '[':  # Handle the start of a box
                    queue.append((new_row, new_col))
                    assert grid[new_row][new_col + 1] == ']'  # Ensure proper box structure
                    queue.append((new_row, new_col + 1))
                if grid[new_row][new_col] == ']':  # Handle the end of a box
                    queue.append((new_row, new_col))
                    assert grid[new_row][new_col - 1] == '['  # Ensure proper box structure
                    queue.append((new_row, new_col - 1))
            if not path_clear:  # If the path is blocked, skip the move
                continue
            while len(visited_cells) > 0:  # Move all cells in the path to the new position
                for cell_row, cell_col in sorted(visited_cells):
                    new_row, new_col = cell_row + delta_row, cell_col + delta_col
                    if (new_row, new_col) not in visited_cells:
                        assert grid[new_row][new_col] == '.'  # Ensure the destination is empty
                        grid[new_row][new_col] = grid[cell_row][cell_col]  # Move the content
                        grid[cell_row][cell_col] = '.'  # Clear the original cell
                        visited_cells.remove((cell_row, cell_col))
            current_row += delta_row  # Update the player's position
            current_col += delta_col
    return grid

def find_gps(grid):
    # Calculates GPS-like score for boxes in the grid
    rows = len(grid)
    cols = len(grid[0])
    ans = 0
    for r in range(rows):
        for c in range(cols):
            if grid[r][c] in ['[', 'O']:  # Count positions of boxes and brackets
                ans += 100 * r + c  # Calculate score based on position
    return ans

# Process room without enlargement and find GPS
fixed_room = process_room_movement(room, False)
print("Part 1 - Find GPS of boxes in room:", find_gps(fixed_room))

# Process enlarged room and find GPS
fixed_enlarged_room = process_room_movement(room, True)
print("Part 2 - Find GPS of boxes in enlarged room:", find_gps(fixed_enlarged_room))
