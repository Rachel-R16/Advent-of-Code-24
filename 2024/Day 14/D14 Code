import re
from collections import defaultdict
from functools import reduce
from operator import mul

# Function to calculate safety factors over a given number of steps
def find_safety(robot_info, bounds, steps=100):
    # Define quadrant identifiers for robots based on their positions
    quadrant_map = [[1, 2], [3, 4]]  # Top-left, top-right, bottom-left, bottom-right
    safety_factors = []  # List to store safety factors for each step

    for step in range(steps):
        # Initialize the updated robot positions and a dictionary to count robots in each quadrant
        updated_positions = []
        quadrant_counts = defaultdict(int)

        # Update the position of each robot and determine its quadrant
        for robot in robot_info:
            x, y, dx, dy = robot  # Unpack the current position and velocity
            new_x = (x + dx) % bounds[0]  # Wrap around horizontally within bounds
            new_y = (y + dy) % bounds[1]  # Wrap around vertically within bounds
            updated_positions.append((new_x, new_y, dx, dy))

            # Check if the robot is not at the center of the grid
            if new_x != bounds[0] // 2 and new_y != bounds[1] // 2:
                # Determine the robot's quadrant and increment the count
                quadrant_counts[quadrant_map[new_x < bounds[0] // 2][new_y < bounds[1] // 2]] += 1

        # Calculate the safety factor as the product of the quadrant counts
        safety_factor = reduce(mul, quadrant_counts.values(), 1)
        safety_factors.append((safety_factor, step + 1))  # Store the safety factor and step index
        robot_info = updated_positions  # Update robot_info for the next step

    return safety_factors

# Function to calculate the safety factor after the last step
def find_safety_factor(robot_info, bounds):
    # Get the safety factors for all steps and return the last safety factor
    return find_safety(robot_info, bounds)[-1][0]

# Function to find the minimum time step for a specific safety factor
def part2(robot_info, bounds):
    # Calculate safety factors for up to 10,000 steps and return the step with the minimum safety factor
    return min(find_safety(robot_info, bounds, 10000))[1]

# Read and parse the input file for robot positions and velocities
with open('D14 Input') as file:
    # Extract robot positions (x, y) and velocities (dx, dy) using regex
    position_velocity = [
        tuple(int(num) for num in re.match(r'^p=(\d+),(\d+) v=(-?\d+),(-?\d+)$', line).groups())
        for line in file.readlines()
    ]

# Define the bounds for the grid (width, height)
bounds = (101, 103)

# Calculate the safety factor after 100 seconds (Part 1)
safety_factor = find_safety_factor(position_velocity, bounds)
print("Part 1 - Safety factor after 100 seconds:", safety_factor)

# Calculate the fewest number of seconds to display the Christmas tree (Part 2)
seconds = part2(position_velocity, bounds)
print("Part 2 - Fewest number of seconds to display Christmas Tree:", seconds)
